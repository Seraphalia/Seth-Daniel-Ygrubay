// Libraries

#include <webots/motor.h>
#include <webots/robot.h>
#include <stdlib.h>

#define NUMBER_OF_JOINTS 12
#define JUMP_DURATION 0.5
#define RECOVERY_DURATION 0.5

// ---------------------------------------------------------------------------------------------------------------
// Arrays

// Motor Tag Array
static WbDeviceTag motors[NUMBER_OF_JOINTS];

// Motor Name Array
static const char *motor_names[NUMBER_OF_JOINTS] = {
  "front left shoulder abduction motor", 
  "front left shoulder rotation motor",  
  "front left elbow motor",                
  "front right shoulder abduction motor",   
  "front right shoulder rotation motor",    
  "front right elbow motor",               
  "rear left shoulder abduction motor",   
  "rear left shoulder rotation motor",      
  "rear left elbow motor",                  
  "rear right shoulder abduction motor",    
  "rear right shoulder rotation motor",     
  "rear right elbow motor"                  
};

// ---------------------------------------------------------------------------------------------------------------
// Functions

// Function to Perform Time Step
static void step() {
  // Get Time Step
  const double time_step = wb_robot_get_basic_time_step();
  
  // End Simulation
  if (wb_robot_step(time_step) == -1) {
    wb_robot_cleanup(); 
    exit(0);           
  }
}

// Function for Leg Joint Movements
static void move_legs(const double *target, double duration) {

  const double time_step = wb_robot_get_basic_time_step();
  
  // Calculate number of steps needed for a duration
  // Multiply by 1000 for milliseconds

  const int steps = duration * 1000 / time_step;
  
  // Joint Position Arrays
  double current_position[NUMBER_OF_JOINTS];
  double step_difference[NUMBER_OF_JOINTS];

  // Joint Movement Calculation
  for (int i = 0; i < NUMBER_OF_JOINTS; ++i) {
    current_position[i] = wb_motor_get_target_position(motors[i]); 
    step_difference[i] = (target[i] - current_position[i]) / steps;   
  }

  // Joint Movement Updates
  for (int i = 0; i < steps; ++i) {
    for (int j = 0; j < NUMBER_OF_JOINTS; ++j) {
      current_position[j] += step_difference[j];   
      wb_motor_set_position(motors[j], current_position[j]); 
    }
    step();
  }
}

// Jump Function
static void jump() {

  // Joint Position Values - Original
  const double crouch_position[NUMBER_OF_JOINTS] = {
    -0.5, -1.0, 1.59,   // Front left leg, Shoulder Abduction Motor, Shoulder Rotation Motor, Elbow Motor
     0.5, -1.0, 1.59,   // Front right leg
    -0.5, -1.0, 1.59,   // Rear left leg, 
     0.5, -1.0, 1.59    // Rear right leg
  };

  // Joint Position Values - Target
  const double launch_position[NUMBER_OF_JOINTS] = {
    -0.1, -0.1, 0.8,
     0.1, -0.1, 0.8, 
    -0.1, -0.5, 0.5,  
     0.1, -0.5, 0.5   
  };

  // Move to Crouch
  move_legs(crouch_position, JUMP_DURATION);
  
  // Move to Jump
  move_legs(launch_position, JUMP_DURATION);
  
  // Return to Cruch
  move_legs(crouch_position, RECOVERY_DURATION);
}

// ---------------------------------------------------------------------------------------------------------------
// Command Loop

int main() {
  wb_robot_init();

  // Loop to Retrieve Joint/Motor Name
  for (int i = 0; i < NUMBER_OF_JOINTS; ++i)
    motors[i] = wb_robot_get_device(motor_names[i]);

  // Repeat Jump
  while (true) {
    jump(); // Perform one full jump sequence.
  }

  // Cleanup Resources - Just In Case
  wb_robot_cleanup();
  return 0;
}
